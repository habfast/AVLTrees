"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,r,i){return r&&t(e.prototype,r),i&&t(e,i),e}}(),AVLTree;!function(){var t=function(t,e){return e>t?-1:t>e?1:0},e=function(){function t(e,r,i,n,h){_classCallCheck(this,t),this.val=e,this.key=r,this.parent=i,this.left=n,this.right=h}return _createClass(t,[{key:"violates_AVL_property",value:function(){return Math.abs(this.balance_factor())>1?this:this.parent&&this.parent.violates_AVL_property()}},{key:"balance_factor",value:function(){return(this.right?this.right.height:-1)-(this.left?this.left.height:-1)}},{key:"recalc_height",value:function(){this.height=Math.max(this.left?this.left.height:-1,this.right?this.right.height:-1)+1,this.parent&&this.parent.recalc_height()}},{key:"rotate",value:function(t){var e=void 0;return t?(e=this.right,this.right=e.left,this.right&&(this.right.parent=this),e.left=this):(e=this.left,this.left=e.right,this.left&&(this.left.parent=this),e.right=this),this.is_left()?this.parent.left=e:this.is_right()&&(this.parent.right=e),e.parent=this.parent,this.parent=e,this.recalc_height(),e}},{key:"is_left",value:function(){return this.parent&&this.parent.left===this}},{key:"is_right",value:function(){return this.parent&&this.parent.right===this}},{key:"prev",value:function(){if(this.left)return n(this.left);var t=this;do{if(t.is_right())return t.parent;t=t.parent}while(t)}},{key:"next",value:function(){if(this.right)return i(this.right);var t=this;do{if(t.is_left())return t.parent;t=t.parent}while(t)}},{key:"rebalance",value:function(){var t=this.balance_factor(),e=t>1?this.right:this.left,r=e.balance_factor();return(t>1?0>r:r>0)&&e.rotate(r>0),this.rotate(t>1)}}]),t}(),r=function(e,r){function i(t){return t?{"-1":function(){return i(t.left)||n&&t},0:function(){return t},1:function(){return i(t.right)||n&&t}}[h(e,t.key)]():void 0}var n=arguments.length<=2||void 0===arguments[2]?!1:arguments[2],h=arguments.length<=3||void 0===arguments[3]?t:arguments[3],a=i(r);return a?a&&n&&a.key>e?a.prev():a:void 0},i=function h(t){return t.left?h(t.left):t},n=function a(t){return t.right?a(t.right):t};AVLTree=function(){function h(){var e=arguments.length<=0||void 0===arguments[0]?t:arguments[0];_classCallCheck(this,h),this._root=void 0,this.length=0,this.cmp=e}return _createClass(h,[{key:"get",value:function(t){var e=r(t,this._root,void 0,this.cmp);return e&&e.val}},{key:"first_matching",value:function(t){return r(t,this._root,!0,this.cmp)}},{key:"put",value:function(t,r){var i,n=this,h=function s(h,a){return h?({"-1":function(){return h.left=s(h.left,h)},0:function(){return h.val=r,h},1:function(){return h.right=s(h.right,h)}}[n.cmp(t,h.key)](),h):i=new e(r,t,a)};if(this._root){if(h(this._root),i){this.length++,i.recalc_height();for(var a;a=i.violates_AVL_property();)a==this._root?(this._root=a.rebalance(),a.recalc_height()):a.rebalance()}}else this._root=new e(r,t),this.length++;return this}},{key:"first",value:function(){return this._root&&i(this._root)}},{key:"last",value:function(){return this._root&&n(this._root)}},{key:Symbol.iterator,value:regeneratorRuntime.mark(function a(){var t;return regeneratorRuntime.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(!this._root){e.next=5;break}t=i(this._root);case 2:return e.next=4,t.val;case 4:if(t=t.next()){e.next=2;break}case 5:case"end":return e.stop()}},a,this)})}]),h}()}();
//# sourceMappingURL=data:application/json;base64,
